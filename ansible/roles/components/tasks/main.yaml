- name: Install helm
  block:
    - name: Add helm's official GPG key
      ansible.builtin.apt_key:
        url: https://baltocdn.com/helm/signing.asc
        state: present
    - name: Add helm repository
      ansible.builtin.apt_repository:
        repo: deb https://baltocdn.com/helm/stable/debian/ all main
        state: present
    - name: Update apt repository
      ansible.builtin.apt:
        update_cache: true
    - name: Install helm
      ansible.builtin.apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - helm

- name: Check if Cilium is installed
  ansible.builtin.command: kubectl get -n cilium deploy cilium-operator
  register: components_cilium_installed
  changed_when: false
  failed_when: false
- name: Setup Cilium
  when: components_cilium_installed.rc != 0
  block:
    - name: Add Cilium chart repo
      ansible.builtin.shell: |
        helm repo add cilium https://helm.cilium.io/
        helm repo update
      changed_when: false
    - name: Deploy Cilium
      ansible.builtin.shell: |
        helm upgrade --install cilium cilium/cilium --namespace cilium --create-namespace \
          --set kubeProxyReplacement=true --set k8sServiceHost=auto --set ipv6.enabled=true \
          --set l2announcements.enabled=true --set k8sClientRateLimit.qps=40 --set k8sClientRateLimit.burst=50
      changed_when: false
    - name: Restart pods
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          kubectl get pods -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,HOSTNETWORK:.spec.hostNetwork \
            --namespace cilium --no-headers=true | grep '<none>' | awk '{print "-n "$1" "$2}' | xargs -L 1 -r kubectl delete pod
      changed_when: false
      failed_when: false

- name: Setup IP pool
  block:
    - name: Send IP pool config
      ansible.builtin.template:
        src: pool.yaml.j2
        dest: /tmp/pool.yaml
        mode: "0644"
    - name: Apply IP pool config
      ansible.builtin.command: kubectl apply -f /tmp/pool.yaml
      register: components_ret
      until: components_ret.rc == 0
      retries: 12
      delay: 5
      changed_when: false

- name: Check if ArgoCD is installed
  ansible.builtin.command: kubectl get -n argocd deploy argocd-server
  register: components_argocd_installed
  changed_when: false
  failed_when: false
- name: Setup ArgoCD
  when: components_argocd_installed.rc != 0
  block:
    - name: Add ArgoCD chart repo
      ansible.builtin.shell: |
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
      changed_when: false
    - name: Copy ArgoCD values file
      ansible.builtin.template:
        src: argocd-vars.yaml.j2
        dest: /tmp/argocd-vars.yaml
        mode: "0644"
    - name: Deploy ArgoCD
      ansible.builtin.command: helm upgrade --install argocd argo/argo-cd --namespace argocd --create-namespace -f /tmp/argocd-vars.yaml --force
      changed_when: false

- name: Create misc resources
  block:
    - name: Apply necessary CRD
      ansible.builtin.shell: |
        kubectl apply -f \
          https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.85.0/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
        kubectl apply -f \
          https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.85.0/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml
        kubectl apply -f \
          https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.85.0/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
        kubectl apply -f https://github.com/kubernetes-sigs/hierarchical-namespaces/releases/download/v1.1.0/default.yaml
      changed_when: false
    - name: Create infrastructure namespace
      ansible.builtin.shell: kubectl get ns infrastructure || kubectl create ns infrastructure
      register: components_ret
      until: components_ret.rc == 0
      retries: 12
      delay: 5
      changed_when: false
    - name: Create GitHub App secret
      ansible.builtin.shell: |
        kubectl get secret github-app -n infrastructure || \
        kubectl create secret generic github-app -n infrastructure \
          --from-literal=client-id="{{ lookup('env', 'GITHUB_APP_CLIENT_ID') }}" \
          --from-literal=client-secret="{{ lookup('env', 'GITHUB_APP_CLIENT_SECRET') }}"
        kubectl label secret github-app -n infrastructure "app.kubernetes.io/part-of=argocd"
      register: components_ret
      until: components_ret.rc == 0
      retries: 12
      delay: 5
      changed_when: false
    - name: Create infrastructure namespace
      ansible.builtin.shell: kubectl get ns monitoring || kubectl create ns monitoring
      register: components_ret
      until: components_ret.rc == 0
      retries: 12
      delay: 5
      changed_when: false
    - name: Create GitHub App secret
      ansible.builtin.shell: |
        kubectl get secret github-app -n monitoring || \
        kubectl create secret generic github-app -n monitoring \
          --from-literal=client-id="{{ lookup('env', 'GITHUB_APP_CLIENT_ID') }}" \
          --from-literal=client-secret="{{ lookup('env', 'GITHUB_APP_CLIENT_SECRET') }}"
      register: components_ret
      until: components_ret.rc == 0
      retries: 12
      delay: 5
      changed_when: false

    - name: Create scoreserver namespace
      ansible.builtin.shell: kubectl get ns scoreserver || kubectl create ns scoreserver
      register: components_ret
      until: components_ret.rc == 0
      retries: 12
      delay: 5
      changed_when: false
    - name: Create scoreserver secret
      ansible.builtin.shell: |
        kubectl get secret scoreserver-secrets -n scoreserver || \
        kubectl create secret generic scoreserver-secrets -n scoreserver \
          --from-literal=growi-api-token="{{ lookup('env', 'GROWI_API_TOKEN') }}" \
          --from-literal=discord-client-id="{{ lookup('env', 'DISCORD_CLIENT_ID') }}" \
          --from-literal=discord-client-secret="{{ lookup('env', 'DISCORD_CLIENT_SECRET') }}"
      register: components_ret
      until: components_ret.rc == 0
      retries: 12
      delay: 5
      changed_when: false
    - name: Create scoreserver client secret
      ansible.builtin.shell: |
        kubectl get secret scoreserver-client -n infrastructure || \
        kubectl create secret generic scoreserver-client -n infrastructure \
          --from-literal=client-secret="{{ lookup('env', 'SCORESERVER_CLIENT_SECRET') }}"
        kubectl get secret scoreserver-client -n scoreserver || \
        kubectl create secret generic scoreserver-client -n scoreserver \
          --from-literal=client-secret="{{ lookup('env', 'SCORESERVER_CLIENT_SECRET') }}"
      register: components_ret
      until: components_ret.rc == 0
      retries: 12
      delay: 5
      changed_when: false

- name: Apply root application
  block:
    - name: Copy root application
      ansible.builtin.copy:
        src: application.yaml
        dest: /tmp/application.yaml
        mode: "0644"
    - name: Apply root application
      ansible.builtin.shell: |
        kubectl apply -f /tmp/application.yaml
      register: components_ret
      until: components_ret.rc == 0
      retries: 12
      delay: 5
      changed_when: false
