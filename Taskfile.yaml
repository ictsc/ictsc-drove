version: 3

# タスク定義の順番
#
# 1.
#   desc
#
# 2.
#   internal
#   dir
#   silent
#
# 3.
#   vars
#   status / sources / generates / methods / preconditions
#   deps
#
# 4.
#   cmds

tasks:
  check-binary:
    desc: 指定されたバイナリがインストールされているか確認
    internal: true
    silent: true
    cmds:
      - |
        if ! (type {{.BINARY}} >/dev/null 2>&1); then
          echo "下記公式ドキュメントを参考に{{if .ALT_NAME}}{{.ALT_NAME}}{{else}}{{.BINARY}}{{end}}をインストールした後、もう一度実行してください"
          echo {{.INSTALL_DOC}}
          exit 1
        fi

  init:
    desc: ワークスペースを初期化
    cmds:
      - cp .vscode/settings-sample.json .vscode/settings.json
      - cd dev && if [ ! -e keys ]; then chmod +x keys.sh; ./keys.sh; fi
      - task: init-env
      - task: init-ansible
      - task: init-terraform

  init-env:
    desc: 環境変数を初期化
    internal: true
    deps:
      - task: check-binary
        vars:
          BINARY: direnv
          INSTALL_DOC: https://github.com/direnv/direnv/blob/master/docs/installation.md
    cmds:
      - task: init-env-file
      - direnv allow

  init-env-file:
    desc: .envrcを作成
    internal: true
    silent: true
    vars:
      SAKURACLOUD_ZONE: tk1b
    status:
      - test -f .envrc
    cmds:
      - |
        echo "さくらクラウドのアクセストークンを入力してください"
        read SAKURACLOUD_ACCESS_TOKEN
        echo "さくらクラウドのアクセスシークレットを入力してください"
        read SAKURACLOUD_ACCESS_TOKEN_SECRET
        echo "今年度のcluster_passを入力してください"
        read CLUSTER_PASS
        echo "tfstateを保存するバケットを選択してください (default: ictsc-drove)"
        read TF_STATE_BUCKET
        if [ -z "$TF_STATE_BUCKET" ]; then
          TF_STATE_BUCKET=ictsc-drove
        fi
        echo "さくらのオブジェクトストレージのアクセスキーを入力してください"
        read TF_STATE_ACCESS_KEY
        echo "さくらのオブジェクトストレージのシークレットキーを入力してください"
        read TF_STATE_SECRET_KEY
        echo "GitHub AppのクライアントIDを入力してください"
        read GITHUB_APP_CLIENT_ID
        echo "GitHub Appのクライアントシークレットキーを入力してください"
        read GITHUB_APP_CLIENT_SECRET
        {
          echo "export KUBECONFIG=./.kube/config";
          echo ""
          echo "export SAKURACLOUD_ACCESS_TOKEN=$SAKURACLOUD_ACCESS_TOKEN";
          echo "export SAKURACLOUD_ACCESS_TOKEN_SECRET=$SAKURACLOUD_ACCESS_TOKEN_SECRET";
          echo "export SAKURACLOUD_ZONE={{.SAKURACLOUD_ZONE}}";
          echo "";
          echo "export CLUSTER_PASS=$CLUSTER_PASS";
          echo "export TF_VAR_cluster_pass=\"\${CLUSTER_PASS}\"";
          echo "export TF_STATE_BUCKET=$TF_STATE_BUCKET";
          echo "";
          echo "export TF_STATE_ACCESS_KEY=$TF_STATE_ACCESS_KEY";
          echo "export TF_STATE_SECRET_KEY=$TF_STATE_SECRET_KEY";
          echo "export AWS_ACCESS_KEY_ID=\"\${TF_STATE_ACCESS_KEY}\"";
          echo "export AWS_SECRET_ACCESS_KEY=\"\${TF_STATE_SECRET_KEY}\"";
          echo "";
          echo "export GITHUB_APP_CLIENT_ID=$GITHUB_APP_CLIENT_ID";
          echo "export GITHUB_APP_CLIENT_SECRET=$GITHUB_APP_CLIENT_SECRET";
        } > .envrc
        echo ".envrcを作成しました"

  reset-env:
    desc: 環境変数を再設定
    cmds:
      - rm -f .envrc
      - task: init-env

  init-ansible:
    desc: Ansibleの初期化
    internal: true
    dir: ansible
    deps:
      - task: check-binary
        vars:
          BINARY: pipenv
          INSTALL_DOC: https://pipenv-ja.readthedocs.io/ja/translate-ja/install.html#installing-pipenv
    cmds:
      - pipenv install -d
      - pipenv run init
      - chmod +x inventory/inventory_handler.py

  lint-ansible:
    desc: AnsibleのLintを実行
    internal: true
    dir: ansible
    cmds:
      - pipenv run lint

  format-ansible:
    desc: Ansibleのフォーマットを実行
    internal: true
    dir: ansible
    cmds:
      - pipenv run format

  ansible:
    desc: Ansibleを実行
    dir: ansible
    deps:
      - lint-ansible
      - format-ansible
    cmds:
      - pipenv run playbook
      - task: check-binary
        vars:
          BINARY: kubectl-oidc_login
          ALT_NAME: kubelogin
          INSTALL_DOC: https://github.com/int128/kubelogin?tab=readme-ov-file#getting-started

  kubeconfig:
    desc: kubeconfigを生成
    dir: ansible
    deps:
      - lint-ansible
      - format-ansible
    cmds:
      - pipenv run kubeconfig
      - task: check-binary
        vars:
          BINARY: kubectl-oidc_login
          ALT_NAME: kubelogin
          INSTALL_DOC: https://github.com/int128/kubelogin?tab=readme-ov-file#getting-started

  init-terraform:
    desc: Terraformの初期化
    internal: true
    dir: terraform
    deps:
      - task: check-binary
        vars:
          BINARY: terraform
          INSTALL_DOC: https://developer.hashicorp.com/terraform/downloads
    cmds:
      - terraform init -backend-config="bucket=$TF_STATE_BUCKET" -migrate-state

  show-ws:
    desc: ワークスペースを表示
    dir: terraform
    cmds:
      - terraform workspace show

  select-dev:
    desc: ワークスペースをdevに切り替え
    cmds:
      - cmd: kubectl config use-context dev
        ignore_error: true
      - cd terraform && terraform workspace select dev

  select-prod:
    desc: ワークスペースをprodに切り替え
    cmds:
      - cmd: kubectl config use-context prod
        ignore_error: true
      - cd terraform && terraform workspace select prod

  lint-terraform:
    desc: TerraformのLintを実行
    internal: true
    dir: terraform
    deps:
      - task: check-binary
        vars:
          BINARY: tflint
          INSTALL_DOC: https://github.com/terraform-linters/tflint?tab=readme-ov-file#installation
    cmds:
      - tflint

  format-terraform:
    desc: Terraformのフォーマットを実行
    internal: true
    dir: terraform
    cmds:
      - terraform fmt

  terraform:
    desc: Terraformを実行
    dir: terraform
    deps:
      - show-ws
      - lint-terraform
      - format-terraform
    cmds:
      - terraform apply -auto-approve

  apply:
    desc: 現在の設定を適用
    cmds:
      - task: terraform
      - task: ansible

  destroy:
    desc: 全てのインスタンスを削除
    dir: terraform
    cmds:
      - terraform destroy

  lint-helm:
    desc: HelmのLintを実行
    cmds:
      - |
        for dir in $(find . -name Chart.yaml | rev | cut -f2- -d'/' | rev); do
          helm lint "$dir" --strict --values "$dir"/ci/ci-values.yaml
        done

  lint-helmfile:
    desc: HelmfileのLintを実行
    cmds:
      - |
        for file in $(find . -name helmfile.yaml); do
          helmfile lint -e dev -f "$file"
          helmfile lint -e prod -f "$file"
        done

  helmfile:
    desc: Helmfileを元にマニフェストを生成
    cmds:
      - |
        for dir in $(find . -name helmfile.yaml | rev | cut -f2- -d'/' | rev); do
          rm -rf "$dir"/generated
          helmfile template -e dev --include-crds -f "$dir"/helmfile.yaml --output-dir generated/dev --output-dir-template {{ "\"{{ .OutputDir }}/{{ .Release.Name}}\"" }}
          helmfile template -e prod --include-crds -f "$dir"/helmfile.yaml --output-dir generated/prod --output-dir-template {{ "\"{{ .OutputDir }}/{{ .Release.Name}}\"" }}
        done
